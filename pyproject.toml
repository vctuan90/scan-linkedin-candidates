[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "linkedin-profile-scraper"
version = "1.0.0"
description = "FastAPI application for automated LinkedIn profile search and extraction"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LinkedIn Scraper Team", email = "team@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
]
requires-python = ">=3.8"
dependencies = [
    "fastapi==0.109.2",
    "uvicorn==0.27.1",
    "pydantic==2.6.1",
    "python-dotenv==1.0.1",
    "python-decouple==3.8",
    "selenium==4.15.2",
    "webdriver-manager==4.0.1",
    "requests==2.31.0",
    "random-user-agent==1.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "black==23.11.0",
    "flake8==6.1.0",
    "mypy==1.7.1",
    "pre-commit==3.5.0",
    "httpx==0.25.2",
    "factory-boy==3.3.0",
]
docs = [
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
]
prod = [
    "gunicorn==21.2.0",
    "prometheus-client==0.19.0",
    "structlog==23.2.0",
    "sentry-sdk[fastapi]==1.38.0",
    "cryptography==41.0.8",
]

[project.urls]
Homepage = "https://github.com/your-org/linkedin-profile-scraper"
Documentation = "https://your-org.github.io/linkedin-profile-scraper"
Repository = "https://github.com/your-org/linkedin-profile-scraper"
Issues = "https://github.com/your-org/linkedin-profile-scraper/issues"

[project.scripts]
linkedin-scraper = "linkedin_scraper.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "webdriver_manager.*",
    "random_user_agent.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 